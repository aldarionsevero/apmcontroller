#include <ros/ros.h>
#include "roscopter/RC.h"
#include "roscopter/Control.h"

bool shut=false; //global

roscopter::RC buildRCMsg(int aileron, int elevator, int throttle, int yaw) {
	roscopter::RC msg;
	msg.channel[0] = aileron;
	msg.channel[1] = elevator;
	msg.channel[2] = throttle;
	msg.channel[3] = yaw;

	//We never override channel 4, this will let us recover to manual control.
	msg.channel[4] = 0;

	//Channels 5-7 are not in use, so we set them = 0.
	msg.channel[5] = 0;
	msg.channel[6] = 0;
	msg.channel[7] = 0;

	return msg;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void send_rcCallback(const roscopter::RC::ConstPtr& msg)
{
  	if(msg->channel[4]<1800){
		shut=true;
	}
	else
		shut=false;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "rc_sender");
	ROS_INFO("Initializing");
    ros::NodeHandle n;
    ros::Publisher rc_pub = n.advertise<roscopter::RC>("send_rc", 1000);
	ros::Subscriber sub = n.subscribe("rc", 1000, send_rcCallback);
	//ros::arm arm;
    //ros::service::call("arm", arm);
    ros::Rate loop_rate(10);
    int count = 0;
	long rcthr, rcyaw, rcpit, rcroll;   // Variables to store rc input
	//rcthr = channels[2];
	//rcyaw = map(channels[3], 1921, 1125, -150, 150); //inverse
	//rcpit = map(channels[1], 1127, 1924, -45, 45);
	//rcroll = map(channels[0], 1923, 1127, -45, 45); //inverse
	//get values maped in the desired range at each loop 
	//the values that will come from simulink are going to be in float values (probably rad or euler degrees)  [TODO]->inverse map?
	//only need to do work here if simulink wont handle the control loop

    while (ros::ok())
    {
		roscopter::RC msg;
		//roll/aileron, pitch/elevator, throttle, yaw/rudder
		if(count<=30)
			msg = buildRCMsg(1000,1000,1300,1000);
		if(count>30 && count<=60)
			msg = buildRCMsg(1000,1000,1400,1000);
		if(count>60 && count<=90)
			msg = buildRCMsg(1000,1000,1500,1000);
		if(count>90)
			msg = buildRCMsg(1000,1000,1700,1000);
		rc_pub.publish(msg);
		ros::spinOnce();
		loop_rate.sleep();
		if(shut){
			msg.channel[0] = 0;
			msg.channel[1] = 0;
			msg.channel[2] = 0;
			msg.channel[3] = 0;
			rc_pub.publish(msg);
			ros::shutdown();
		}		
		++count;
    }
    return 0;
}
